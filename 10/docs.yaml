openapi: 3.0.1
info:
  title: Books Library
  version: 1.0.0
paths:
  /api/author:
    get:
      tags:
      - author
      description: Вывод всех авторов
      operationId: getApiAuthor
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Author'
        default:
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorInfo'
      security:
      - httpAuth: []
    put:
      tags:
      - author
      description: Обновляем автора
      operationId: putApiAuthor
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Author'
        required: true
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Author'
        default:
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorInfo'
      security:
      - httpAuth: []
    post:
      tags:
      - author
      description: Создаём автора
      operationId: postApiAuthor
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Author'
        required: true
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Author'
        default:
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorInfo'
      security:
      - httpAuth: []
  /api/author/{p1}:
    get:
      tags:
      - author
      description: Вывод автора по Id
      operationId: getApiAuthorP1
      parameters:
      - name: p1
        in: path
        required: true
        schema:
          type: string
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Author'
        default:
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorInfo'
      security:
      - httpAuth: []
    delete:
      tags:
      - author
      description: Удаляем автора по Id
      operationId: deleteApiAuthorP1
      parameters:
      - name: p1
        in: path
        required: true
        schema:
          type: string
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Author'
        default:
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorInfo'
      security:
      - httpAuth: []
  /api/author/find:
    get:
      tags:
      - author
      description: 'Вывод всех авторов или поиск по параметрам: ''firstname'' - имя,
        ''lastname'' - фамилия'
      operationId: getApiAuthorFind
      parameters:
      - name: firstname
        in: query
        required: false
        schema:
          type: string
      - name: lastname
        in: query
        required: false
        schema:
          type: string
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Author'
        default:
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorInfo'
      security:
      - httpAuth: []
  /api/book:
    get:
      tags:
      - book
      description: Вывод всех книг
      operationId: getApiBook
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Book'
        default:
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorInfo'
      security:
      - httpAuth: []
    put:
      tags:
      - book
      description: Обновляем книгу
      operationId: putApiBook
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Book'
        required: true
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Book'
        default:
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorInfo'
      security:
      - httpAuth: []
    post:
      tags:
      - book
      description: Создаём книгу
      operationId: postApiBook
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Book'
        required: true
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Book'
        default:
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorInfo'
      security:
      - httpAuth: []
  /api/book/{p1}:
    get:
      tags:
      - book
      description: Вывод книги по Id
      operationId: getApiBookP1
      parameters:
      - name: p1
        in: path
        required: true
        schema:
          type: string
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Book'
        default:
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorInfo'
      security:
      - httpAuth: []
    delete:
      tags:
      - book
      description: Удаляем книгу по Id
      operationId: deleteApiBookP1
      parameters:
      - name: p1
        in: path
        required: true
        schema:
          type: string
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Book'
        default:
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorInfo'
      security:
      - httpAuth: []
  /api/book/find:
    get:
      tags:
      - book
      description: 'Вывод всех книг или поиск по параметрам: ''title'' - название,
        ''author'' - Id автора, ''published'' - год издания, ''pages'' - кол-во страниц'
      operationId: getApiBookFind
      parameters:
      - name: title
        in: query
        required: false
        schema:
          type: string
      - name: author
        in: query
        required: false
        schema:
          type: string
      - name: published
        in: query
        required: false
        schema:
          type: string
      - name: pages
        in: query
        required: false
        schema:
          type: string
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Book'
        default:
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorInfo'
      security:
      - httpAuth: []
  /api/record:
    get:
      tags:
      - record
      description: Вывод всех записей
      operationId: getApiRecord
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Record'
        default:
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorInfo'
      security:
      - httpAuth: []
    put:
      tags:
      - record
      description: Обновляем запись
      operationId: putApiRecord
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Record'
        required: true
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Record'
        default:
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorInfo'
      security:
      - httpAuth: []
    post:
      tags:
      - record
      description: Создаём запись
      operationId: postApiRecord
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Record'
        required: true
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Record'
        default:
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorInfo'
      security:
      - httpAuth: []
  /api/record/{p1}:
    get:
      tags:
      - record
      description: Вывод записи по Id
      operationId: getApiRecordP1
      parameters:
      - name: p1
        in: path
        required: true
        schema:
          type: string
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Record'
        default:
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorInfo'
      security:
      - httpAuth: []
    delete:
      tags:
      - record
      description: Удаляем запись по Id
      operationId: deleteApiRecordP1
      parameters:
      - name: p1
        in: path
        required: true
        schema:
          type: string
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Record'
        default:
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorInfo'
      security:
      - httpAuth: []
  /api/record/find:
    get:
      tags:
      - record
      description: 'Вывод всех записей или поиск по параметрам: ''user'' - Id пользователя,
        ''book'' - Id книги, ''get'' - yyyyMMddTHHmmss когда книгу взяли, ''return''
        - yyyyMMddTHHmmss когда книгу вернули'
      operationId: getApiRecordFind
      parameters:
      - name: user
        in: query
        required: false
        schema:
          type: string
      - name: book
        in: query
        required: false
        schema:
          type: string
      - name: get
        in: query
        required: false
        schema:
          type: string
      - name: return
        in: query
        required: false
        schema:
          type: string
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Record'
        default:
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorInfo'
      security:
      - httpAuth: []
  /api/role:
    get:
      tags:
      - role
      description: Вывод всех ролей
      operationId: getApiRole
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Role'
        default:
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorInfo'
      security:
      - httpAuth: []
    put:
      tags:
      - role
      description: Обновляем роль
      operationId: putApiRole
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Role'
        required: true
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Role'
        default:
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorInfo'
      security:
      - httpAuth: []
    post:
      tags:
      - role
      description: Создаём роль
      operationId: postApiRole
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Role'
        required: true
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Role'
        default:
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorInfo'
      security:
      - httpAuth: []
  /api/role/{p1}:
    get:
      tags:
      - role
      description: Вывод роли по Id
      operationId: getApiRoleP1
      parameters:
      - name: p1
        in: path
        required: true
        schema:
          type: string
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Role'
        default:
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorInfo'
      security:
      - httpAuth: []
    delete:
      tags:
      - role
      description: Удаляем роль по Id
      operationId: deleteApiRoleP1
      parameters:
      - name: p1
        in: path
        required: true
        schema:
          type: string
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Role'
        default:
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorInfo'
      security:
      - httpAuth: []
  /api/role/find:
    get:
      tags:
      - role
      description: 'Вывод всех ролей или поиск по параметру: ''name'' - имя'
      operationId: getApiRoleFind
      parameters:
      - name: name
        in: query
        required: false
        schema:
          type: string
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Role'
        default:
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorInfo'
      security:
      - httpAuth: []
  /api/user:
    get:
      tags:
      - user
      description: Вывод всех пользователей
      operationId: getApiUser
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'
        default:
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorInfo'
      security:
      - httpAuth: []
    put:
      tags:
      - user
      description: Обновляем пользователя
      operationId: putApiUser
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
        required: true
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        default:
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorInfo'
      security:
      - httpAuth: []
    post:
      tags:
      - user
      description: Создаём пользователя
      operationId: postApiUser
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
        required: true
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        default:
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorInfo'
      security:
      - httpAuth: []
  /api/user/{p1}:
    get:
      tags:
      - user
      description: Вывод пользователя по Id
      operationId: getApiUserP1
      parameters:
      - name: p1
        in: path
        required: true
        schema:
          type: string
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        default:
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorInfo'
      security:
      - httpAuth: []
    delete:
      tags:
      - user
      description: Удаляем пользователя по Id
      operationId: deleteApiUserP1
      parameters:
      - name: p1
        in: path
        required: true
        schema:
          type: string
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        default:
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorInfo'
      security:
      - httpAuth: []
  /api/user/find:
    get:
      tags:
      - user
      description: 'Вывод всех пользователей или поиск по параметрам: ''username''
        - имя в системе, ''firstname'' - имя ''lastname'' - фамилия ''age'' - возраст''role''
        - Id роли'
      operationId: getApiUserFind
      parameters:
      - name: username
        in: query
        required: false
        schema:
          type: string
      - name: firstname
        in: query
        required: false
        schema:
          type: string
      - name: lastname
        in: query
        required: false
        schema:
          type: string
      - name: age
        in: query
        required: false
        schema:
          type: string
      - name: role
        in: query
        required: false
        schema:
          type: string
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'
        default:
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorInfo'
      security:
      - httpAuth: []
  /api/login:
    post:
      tags:
      - login
      description: Login
      operationId: postApiLogin
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AuthUser'
        required: true
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthToken'
        default:
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorInfo'
  /api/logout:
    post:
      tags:
      - logout
      description: Logout
      operationId: postApiLogout
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthToken'
        default:
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorInfo'
      security:
      - httpAuth: []
components:
  schemas:
    Author:
      required:
      - firstName
      - lastName
      type: object
      properties:
        id:
          type: string
        firstName:
          type: string
        lastName:
          type: string
    ErrorInfo:
      oneOf:
      - $ref: '#/components/schemas/BadRequest'
      - $ref: '#/components/schemas/NotFound'
      - $ref: '#/components/schemas/Unauthorized'
    BadRequest:
      required:
      - what
      type: object
      properties:
        what:
          type: string
    NotFound:
      required:
      - what
      type: object
      properties:
        what:
          type: string
    Unauthorized:
      required:
      - what
      type: object
      properties:
        what:
          type: string
    Book:
      required:
      - title
      - published
      - pages
      type: object
      properties:
        id:
          type: string
        title:
          type: string
        authors:
          type: array
          items:
            type: string
        published:
          type: integer
        pages:
          type: integer
    Record:
      required:
      - userId
      - bookId
      - getDT
      - returnDT
      type: object
      properties:
        id:
          type: string
        userId:
          type: string
        bookId:
          type: string
        getDT:
          type: string
          format: date-time
        returnDT:
          type: string
          format: date-time
    Role:
      required:
      - name
      type: object
      properties:
        id:
          type: string
        name:
          type: string
    User:
      required:
      - userName
      - password
      - firstName
      - lastName
      - age
      type: object
      properties:
        id:
          type: string
        userName:
          type: string
        password:
          type: string
        firstName:
          type: string
        lastName:
          type: string
        age:
          type: integer
        roles:
          type: array
          items:
            type: string
    AuthUser:
      required:
      - username
      - password
      type: object
      properties:
        username:
          type: string
        password:
          type: string
    AuthToken:
      required:
      - token
      type: object
      properties:
        token:
          type: string
  securitySchemes:
    httpAuth:
      type: http
      scheme: bearer
